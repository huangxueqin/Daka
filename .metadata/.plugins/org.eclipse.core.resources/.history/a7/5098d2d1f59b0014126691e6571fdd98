package com.hxq.daka;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import com.hxq.daka.MonthCellDescriptor.RangeState;

import android.app.Activity;
import android.content.res.Resources;
import android.os.Bundle;
import android.os.Handler;
import android.os.HandlerThread;
import android.util.SparseArray;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.ViewSwitcher;

public class RecordActivity extends Activity implements
		ViewSwitcher.ViewFactory, View.OnClickListener {

	private ViewSwitcher viewSwitcher;
	private Button mPrevBtn;
	private Button mNextBtn;
	private TextView mTitle;

	private LayoutInflater mInflater;
	private int dayBackgroundResId;
	private int dayTextColorResId;
	private int dividerColor;
	private int titleTextColor;
	private int headerTextColor;
	private DateFormat weekdayNameFormat;
	private DateFormat monthNameFormat;

	private DbHelper mDBHelper;
	private MonthView.Listener listener;

	private final Calendar today = Calendar.getInstance(Locale.getDefault());
	private MonthView todayMonthView;

	static HandlerThread workThread = new HandlerThread("createMonthView");
	static {
		workThread.start();
	}

	static Handler mHandler;
	private final int MAXCACHE_NUM = 12;
	private List<MonthView> cachedViews = new ArrayList<MonthView>();
	private List<MonthView> cachedViews2 = new ArrayList<MonthView>();
	private int currentIndex = 0;
	private int maxIndex = 0;
	private int minIndex = 0;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.record);
		getActionBar().setDisplayHomeAsUpEnabled(true);
		initData();
		mPrevBtn = (Button) this.findViewById(R.id.id_btn_prev);
		mPrevBtn.setOnClickListener(this);
		mNextBtn = (Button) this.findViewById(R.id.id_btn_next);
		mNextBtn.setOnClickListener(this);
		mTitle = (TextView) this.findViewById(R.id.id_title);
		viewSwitcher = (ViewSwitcher) this.findViewById(R.id.id_view_switcher);
		viewSwitcher.setFactory(this);
		todayMonthView = createAndInitMonthView(today);
		MonthDescriptor monthDes = createMonthDescriptor(today);
		mTitle.setText(monthDes.getLabel());
		ViewGroup parent = (ViewGroup) viewSwitcher.getNextView();
		parent.addView(todayMonthView);
		viewSwitcher.showNext();
		initCachedViews();
	}

	private void initData() {
		mHandler = new Handler(workThread.getLooper());
		mDBHelper = new DbHelper(getApplication());
		mInflater = this.getLayoutInflater();
		listener = new MonthCellClickListener();
		Locale locale = Locale.getDefault();
		Resources res = getResources();
		dividerColor = res.getColor(R.color.calendar_divider);
		dayBackgroundResId = R.drawable.calendar_bg_selector2;
		dayTextColorResId = R.color.calendar_text_selector;
		titleTextColor = res.getColor(R.color.calendar_text_active);
		headerTextColor = res.getColor(R.color.calendar_text_active);
		monthNameFormat = new SimpleDateFormat(
				res.getString(R.string.month_name_format), locale);
		weekdayNameFormat = new SimpleDateFormat(
				res.getString(R.string.day_name_format), locale);
	}

	private MonthDescriptor createMonthDescriptor(Calendar month) {
		Date date = month.getTime();
		return new MonthDescriptor(month.get(Calendar.MONTH),
				month.get(Calendar.YEAR), date, monthNameFormat.format(date));
	}

	private MonthView createAndInitMonthView(Calendar month,
			List<List<MonthCellDescriptor>> cells) {
		MonthDescriptor monthDes = createMonthDescriptor(month);
		MonthView monthView = MonthView.create(null, mInflater,
				weekdayNameFormat, listener, month, dividerColor,
				dayBackgroundResId, dayTextColorResId, titleTextColor, true,
				headerTextColor);
		monthView.init(monthDes, cells, true, null, null);
		return monthView;
	}

	private MonthView createAndInitMonthView(Calendar month) {
		MonthDescriptor monthDes = createMonthDescriptor(month);
		return createAndInitMonthView(month, getMonthCells(monthDes));
	}

	private void initCachedViews() {
		Runnable r = new Runnable() {

			@Override
			public void run() {
				Locale locale = Locale.getDefault();
				Calendar c1 = Calendar.getInstance(locale);
				Calendar c2 = Calendar.getInstance(locale);
				c1.setTime(today.getTime());
				c1.add(Calendar.MONTH, 1);
				c2.setTime(today.getTime());
				c2.add(Calendar.MONTH, -1);
				for (int i = 0; i < MAXCACHE_NUM / 2; i++) {
					cachedViews.add(createAndInitMonthView(c1));
					maxIndex++;
					cachedViews2.add(createAndInitMonthView(c2));
					minIndex--;
					c1.add(Calendar.MONTH, 1);
					c2.add(Calendar.MONTH, -1);
				}
			}
		};
		mHandler.post(r);
	}

	private MonthView getMonthView(int index) {
		if (index == 0) {
			return todayMonthView;
		} else if (index > 0 && index <= maxIndex) {
			return cachedViews.get(index - 1);
		} else if (index < 0 && index >= minIndex) {
			return cachedViews2.get(-index - 1);
		} else {
			return null;
		}
	}

	private void next() {
		if (maxIndex < MAXCACHE_NUM / 2) {

		} else {
			MonthView nextView = getMonthView(currentIndex + 1);
			if (nextView == null) {
				Toast.makeText(this, "不能查看更后面的日期了", Toast.LENGTH_SHORT).show();
				;
			} else {
				currentIndex++;
				ViewGroup parent = (ViewGroup) nextView.getParent();
				if (parent != null)
					parent.removeAllViews();
				parent = (ViewGroup) viewSwitcher.getNextView();
				if (parent != null)
					parent.removeAllViews();
				parent.addView(nextView);
				mTitle.setText(nextView.getMonthDescriptor().getLabel());
				viewSwitcher.setInAnimation(getApplicationContext(), R.anim.switch_in_right);
				viewSwitcher.setOutAnimation(getApplicationContext(), R.anim.switch_out_right);
				viewSwitcher.showNext();
			}
		}
	}

	private void prev() {
		if (minIndex > -MAXCACHE_NUM / 2) {

		} else {
			MonthView prevView = getMonthView(currentIndex - 1);
			if (prevView == null) {
				Toast.makeText(this, "不能查看更前面的日期了", Toast.LENGTH_SHORT).show();
				;
			} else {
				currentIndex--;
				ViewGroup parent = (ViewGroup) prevView.getParent();
				if (parent != null)
					parent.removeAllViews();
				parent = (ViewGroup) viewSwitcher.getNextView();
				if (parent != null)
					parent.removeAllViews();
				parent.addView(prevView);
				mTitle.setText(prevView.getMonthDescriptor().getLabel());
				viewSwitcher.setInAnimation(getApplicationContext(), R.anim.switch_in_left);
				viewSwitcher.setOutAnimation(getApplicationContext(), R.anim.switch_out_left);
				viewSwitcher.showNext();
			}
		}
	}

	@Override
	public View makeView() {
		return mInflater.inflate(R.layout.container, viewSwitcher, false);
	}

	List<List<MonthCellDescriptor>> getMonthCells(MonthDescriptor month) {
		SparseArray<MissionManager.Mission> missions = mDBHelper
				.queryMissionInSingleMonth(
						MissionManager.getInstance(getApplication()),
						month.getYear(), month.getMonth());
		Locale locale = getResources().getConfiguration().locale;
		Calendar cal = Calendar.getInstance(locale);
		cal.setTime(month.getDate());
		List<List<MonthCellDescriptor>> cells = new ArrayList<List<MonthCellDescriptor>>();
		cal.set(Calendar.DAY_OF_MONTH, 1);
		Logr.d("cal.month = " + cal.get(Calendar.MONTH));
		int firstDayOfWeek = cal.get(Calendar.DAY_OF_WEEK);
		Logr.d("cal.month = " + cal.get(Calendar.MONTH));
		int offset = cal.getFirstDayOfWeek() - firstDayOfWeek;
		if (offset > 0) {
			offset -= 7;
		}
		Logr.d("offset = " + offset);
		cal.add(Calendar.DATE, offset);
		Logr.d("cal.month = " + cal.get(Calendar.MONTH));
		Logr.d("month.month = " + month.getMonth());
		Logr.d("cal.year = " + cal.get(Calendar.YEAR));
		Logr.d("month.month = " + month.getYear());
		for(int i=0;i<6;i++) {
			// Logr.d("Building week row starting at %s", cal.getTime());
			List<MonthCellDescriptor> weekCells = new ArrayList<MonthCellDescriptor>();
			cells.add(weekCells);
			for (int c = 0; c < 7; c++) {
				Date date = cal.getTime();
				boolean isCurrentMonth = cal.get(Calendar.MONTH) == month
						.getMonth();
				boolean isSelectable = true;
				boolean isToday = sameDate(cal, today);
				boolean isHighlighted = false;
				int value = cal.get(Calendar.DAY_OF_MONTH);
				MissionManager.Mission mission = missions.get(cal
						.get(Calendar.DAY_OF_MONTH));
				int colorRes = -1;
				if (mission != null) {
					colorRes = mission.getColor();
				}
				weekCells.add(new MonthCellDescriptor(date, isCurrentMonth,
						isSelectable, false, isToday, isHighlighted, value,
						RangeState.NONE, colorRes));

				cal.add(Calendar.DATE, 1);
			}
		}
		return cells;
	}

	private static boolean sameDate(Calendar cal, Calendar selectedDate) {
		return cal.get(Calendar.MONTH) == selectedDate.get(Calendar.MONTH)
				&& cal.get(Calendar.YEAR) == selectedDate.get(Calendar.YEAR)
				&& cal.get(Calendar.DAY_OF_MONTH) == selectedDate
						.get(Calendar.DAY_OF_MONTH);
	}

	private class MonthCellClickListener implements MonthView.Listener {

		@Override
		public void handleClick(MonthCellDescriptor cell) {
			// TODO Auto-generated method stub
			Date date = cell.getDate();
			Calendar c = Calendar.getInstance(Locale.getDefault());
			c.setTime(date);
			String msgStr = "date: " + c.get(Calendar.MONTH) + "/"
					+ c.get(Calendar.DAY_OF_MONTH);
			Toast.makeText(RecordActivity.this, msgStr, Toast.LENGTH_SHORT)
					.show();
		}

	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch(item.getItemId()) {
		case android.R.id.home:
			finish();
			break;
		}
		return true;
	}

	@Override
	public void onClick(View v) {
		int id = v.getId();
		switch (id) {
		case R.id.id_btn_next:
			next();
			break;
		case R.id.id_btn_prev:
			prev();
			break;
		}
	}
}
